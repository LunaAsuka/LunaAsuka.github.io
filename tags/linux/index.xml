<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linux on Luna_Blog</title>
        <link>https://lunaasuka.github.io/tags/linux/</link>
        <description>Recent content in Linux on Luna_Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 18 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lunaasuka.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux下两种链接方式的不同</title>
        <link>https://lunaasuka.github.io/p/linux%E4%B8%8B%E4%B8%A4%E7%A7%8D%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C/</link>
        <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/linux%E4%B8%8B%E4%B8%A4%E7%A7%8D%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C/</guid>
        <description>&lt;p&gt;前言：最近在学习从零写一个操作系统，有时间的话我会考虑写个完整的过程发上来。&lt;/p&gt;
&lt;h2 id=&#34;一&#34;&gt;一&lt;/h2&gt;
&lt;p&gt;​	众所周知，一个c语言程序从写完到变成可执行文件要经历四个步骤，分别是预编译，编译，汇编和链接。本文的重点是讨论链接时的特性。我们先来看一段c语言代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是一段最简单的c语言代码，它十分的简洁，甚至连任何标准库都没有。&lt;/p&gt;
&lt;h2 id=&#34;二使用gcc编译&#34;&gt;二	使用gcc编译&lt;/h2&gt;
&lt;p&gt;​	我们尝试使用gcc进行编译这个文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asuka@ubuntu:~/bochs/bin/kernel$ cat main.c
int main&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;void&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; 0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
asuka@ubuntu:~/bochs/bin/kernel$ gcc -o test.bin main.c
asuka@ubuntu:~/bochs/bin/kernel$ ll test.bin 
-rwxrwxr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; asuka asuka &lt;span class=&#34;m&#34;&gt;7312&lt;/span&gt; Jan &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; 18:20 test.bin*
asuka@ubuntu:~/bochs/bin/kernel$ nm test.bin 
0804a018 B __bss_start
0804a018 b completed.7209
0804a010 D __data_start
0804a010 W data_start
&lt;span class=&#34;m&#34;&gt;08048320&lt;/span&gt; t deregister_tm_clones
&lt;span class=&#34;m&#34;&gt;08048390&lt;/span&gt; t __do_global_dtors_aux
08049f0c t __do_global_dtors_aux_fini_array_entry
0804a014 D __dso_handle
08049f14 d _DYNAMIC
0804a018 D _edata
0804a01c B _end
&lt;span class=&#34;m&#34;&gt;08048444&lt;/span&gt; T _fini
&lt;span class=&#34;m&#34;&gt;08048458&lt;/span&gt; R _fp_hw
080483b0 t frame_dummy
08049f08 t __frame_dummy_init_array_entry
&lt;span class=&#34;m&#34;&gt;08048544&lt;/span&gt; r __FRAME_END__
0804a000 d _GLOBAL_OFFSET_TABLE_
         w __gmon_start__
&lt;span class=&#34;m&#34;&gt;08048460&lt;/span&gt; r __GNU_EH_FRAME_HDR
0804828c T _init
08049f0c t __init_array_end
08049f08 t __init_array_start
0804845c R _IO_stdin_used
         w _ITM_deregisterTMCloneTable
         w _ITM_registerTMCloneTable
08049f10 d __JCR_END__
08049f10 d __JCR_LIST__
         w _Jv_RegisterClasses
&lt;span class=&#34;m&#34;&gt;08048440&lt;/span&gt; T __libc_csu_fini
080483e0 T __libc_csu_init
         U __libc_start_main@@GLIBC_2.0
080483db T main
&lt;span class=&#34;m&#34;&gt;08048350&lt;/span&gt; t register_tm_clones
080482e0 T _start
0804a018 D __TMC_END__
&lt;span class=&#34;m&#34;&gt;08048310&lt;/span&gt; T __x86.get_pc_thunk.bx

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	通过上面的命令我们可以看出，我们使用gcc编译之后的文件 test.bin 大小为7312k，同时我们使用 nm 命令可以看到test.bin文件中有相当多的符号。&lt;/p&gt;
&lt;h2 id=&#34;三使用-ld-命令链接&#34;&gt;三	使用 ld 命令链接&lt;/h2&gt;
&lt;p&gt;​	Linux 中有个之类叫 ld ，可以用来手动把这些文件链接起来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asuka@ubuntu:~/bochs/bin/kernel$ gcc -c -o main.o main.c
asuka@ubuntu:~/bochs/bin/kernel$ file main.o
main.o: ELF 32-bit LSB relocatable, Intel 80386, version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYSV&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, not stripped
asuka@ubuntu:~/bochs/bin/kernel$ ld main.o -Ttext 0xc0001500 -e main -o kernel.bin
asuka@ubuntu:~/bochs/bin/kernel$ ll kernel.bin 
-rwxrwxr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; asuka asuka &lt;span class=&#34;m&#34;&gt;1912&lt;/span&gt; Jan &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; 18:41 kernel.bin*
asuka@ubuntu:~/bochs/bin/kernel$ nm kernel.bin 
c000253c R __bss_start
c000253c R _edata
c000253c R _end
c0001500 T main
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	这次简洁不少，我们首先使用 gcc -c 这个参数把 main.c 编译到汇编那一步，现在只差链接，然后我们可以用 file 看到此时的 main.o 是 relocatable ，是可重定位文件，因为还没有链接，之后我们使用 ld 命令把他链接，-Ttext 命令用于指定起始虚拟地址，这里可以我是为了能在我的操作系统中使用才加的这个参数，可以忽略， -e 是为了指定以 main 为起始点，否则默认是 _start ，链接好后我们可以看到 kernel.bin 的大小只有1912k，其中的符号也只有4条。&lt;/p&gt;
&lt;h2 id=&#34;四比较&#34;&gt;四	比较&lt;/h2&gt;
&lt;p&gt;​	其实两者从功能上来说是完全一样的，test.bin 之所以这么大是因为编译器在编译过程中为程序自动引用了别的代码，这是c运行库的功劳，目的是在调用 main 之前做初始化工作，可以看到里面有 _start ，实际上程序是从这里开始的，之后才调用了 main 函数。而我们手动链接既没有链接其他标准库，又指定了从 main 起始，所以小了很多。&lt;/p&gt;
&lt;h2 id=&#34;五总结&#34;&gt;五	总结&lt;/h2&gt;
&lt;p&gt;​	实际上来说区别不大，该用 gcc 还是要用 gcc 的，这个例子就是演示了下编译器为我们额外做的工作而已。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux中链接使用概要</title>
        <link>https://lunaasuka.github.io/p/linux%E4%B8%AD%E9%93%BE%E6%8E%A5%E4%BD%BF%E7%94%A8%E6%A6%82%E8%A6%81/</link>
        <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/linux%E4%B8%AD%E9%93%BE%E6%8E%A5%E4%BD%BF%E7%94%A8%E6%A6%82%E8%A6%81/</guid>
        <description>&lt;p&gt;学习如何使用链接，通过从 Linux 文件系统多个位置来访问文件，可以让日常工作变得轻松。&lt;/p&gt;
&lt;p&gt;​	Linux 文件系统中有两种链接link：硬链接hard link和软链接soft  link。虽然二者差别显著，但都用来解决相似的问题。它们都提供了对单个文件的多个目录项（引用）的访问，但实现却大为不同。链接的强大功能赋予了  Linux 文件系统灵活性，因为一切皆是文件。&lt;/p&gt;
&lt;p&gt;​	举个例子，我曾发现一些程序要求特定的版本库方可运行。  当用升级后的库替代旧库后，程序会崩溃，提示旧版本库缺失。通常，库名的唯一变化就是版本号。出于直觉，我仅仅给程序添加了一个新的库链接，并以旧库名称命名。我试着再次启动程序，运行良好。程序就是一个游戏，人人都明白，每个玩家都会尽力使游戏进行下去。&lt;/p&gt;
&lt;p&gt;​	事实上，几乎所有的应用程序链接库都使用通用的命名规则，链接名称中包含了主版本号，链接所指向的文件的文件名中同样包含了小版本号。再比如，程序的一些必需文件为了迎合 Linux  文件系统规范，从一个目录移动到另一个目录中，系统为了向后兼容那些不能获取这些文件新位置的程序在旧的目录中存放了这些文件的链接。如果你对  /lib64 目录做一个长清单列表，你会发现很多这样的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; cracklib_dict.hwm -&amp;gt; ../../usr/share/cracklib/pw_dict.hwm
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; cracklib_dict.pwd -&amp;gt; ../../usr/share/cracklib/pw_dict.pwd
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; cracklib_dict.pwi -&amp;gt; ../../usr/share/cracklib/pw_dict.pwi
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; libaccountsservice.so.0 -&amp;gt; libaccountsservice.so.0.0.0
-rwxr-xr-x. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;288456&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; libaccountsservice.so.0.0.0
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; 11:47 libacl.so.1 -&amp;gt; libacl.so.1.1.0
-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;36472&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; 11:47 libacl.so.1.1.0
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; libaio.so.1 -&amp;gt; libaio.so.1.0.1
-rwxr-xr-x. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;6224&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; libaio.so.1.0.0
-rwxr-xr-x. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;6224&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt; libaio.so.1.0.1
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; Jan &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; 16:39 libakonadi-calendar.so.4 -&amp;gt; libakonadi-calendar.so.4.14.26
-rwxr-xr-x. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;816160&lt;/span&gt; Jan &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; 16:39 libakonadi-calendar.so.4.14.26
lrwxrwxrwx. &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt; Jan &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; 16:39 libakonadi-contact.so.4 -&amp;gt; libakonadi-contact.so.4.14.26

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;/lib64 目录下的一些链接&lt;/p&gt;
&lt;p&gt;在上面展示的 /lib64 目录清单列表中，文件模式第一个字母 l （小写字母 l）表示这是一个软链接（又称符号链接）。&lt;/p&gt;
&lt;h2 id=&#34;硬链接&#34;&gt;硬链接&lt;/h2&gt;
&lt;p&gt;​	在 Linux 的 EXT4 文件系统的历史、特性以及最佳实践一文中，我曾探讨过这样一个事实，每个文件都有一个包含该文件信息的  inode，包含了该文件的位置信息。上述文章中的图2展示了一个指向 inode 的单一目录项。每个文件都至少有一个目录项指向描述该文件信息的  inode ，目录项是一个硬链接，因此每个文件至少都有一个硬链接。&lt;/p&gt;
&lt;p&gt;​	如下图 1 所示，多个目录项指向了同一 inode 。这些目录项都是硬链接。我曾在三个目录项中使用波浪线 (~)  的缩写，这是用户目录的惯例表示，因此在该例中波浪线等同于 /home/user  。值得注意的是，第四个目录项是一个完全不同的目录，/home/shared，可能是该计算机上用户的共享文件目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.linuxprobe.com/wp-content/uploads/2017/12/1-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Linux文件链接之使用概要Linux文件链接之使用概要&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;​	硬链接被限制在一个单一的文件系统中。此处的“文件系统” 是指挂载在特定挂载点上的分区或逻辑卷，此例中是  /home。这是因为在每个文件系统中的 inode 号都是唯一的。而在不同的文件系统中，如 /var 或 /opt，会有和 /home 中相同的 inode 号。&lt;/p&gt;
&lt;p&gt;​	因为所有的硬链接都指向了包含文件元信息的单一 inode ，这些属性都是文件的一部分，像所属关系、权限、到该 inode  的硬链接数目，对每个硬链接来说这些特性没有什么不同的。这是一个文件所具有的一组属性。唯一能区分这些文件的是包含在 inode  信息中的文件名。链接到同一目录中的单一文件/ inode 的硬链接必须拥有不同的文件名，这是基于同一目录下不能存在重复的文件名的事实的。&lt;/p&gt;
&lt;p&gt;文件的硬链接数目可通过 ls -l 来查看，如果你想查看实际节点号，可使用 ls -li 命令。&lt;/p&gt;
&lt;h2 id=&#34;软链接&#34;&gt;软链接&lt;/h2&gt;
&lt;p&gt;​	硬链接和软链接（也称为符号链接symlink）的区别在于，硬链接直接指向属于该文件的 inode  ，而软链接直接指向一个目录项，即指向一个硬链接。因为软链接指向的是一个文件的硬链接而非该文件的 inode ，所以它们并不依赖于 inode  号，这使得它们能跨越不同的文件系统、分区和逻辑卷起作用。&lt;/p&gt;
&lt;p&gt;​	软链接的缺点是，一旦它所指向的硬链接被删除或重命名后，该软链接就失效了。软链接虽然还在，但所指向的硬链接已不存在。所幸的是，ls 命令能以红底白字的方式在其列表中高亮显示失效的软链接。&lt;/p&gt;
&lt;h2 id=&#34;链接实验&#34;&gt;链接实验&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;我认为最容易理解链接用法及其差异的方法是动手搭建一个项目。这个项目应以非超级用户的身份在一个空目录下进行。我创建了 ~/temp  目录做这个实验，你也可以这么做。这么做可为项目创建一个安全的环境且提供一个新的空目录让程序运作，如此以来这儿仅存放和程序有关的文件。 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;初始工作&#34;&gt;初始工作&lt;/h2&gt;
&lt;p&gt;首先，在你要进行实验的目录下为该项目中的任务创建一个临时目录，确保当前工作目录（PWD）是你的主目录，然后键入下列命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir temp
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用这个命令将当前工作目录切换到 ~/temp。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; temp
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实验开始，我们需要创建一个能够链接到的文件，下列命令可完成该工作并向其填充内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;du -h &amp;gt; main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 ls -l 长列表命名确认文件正确地创建了。运行结果应类似于我的。注意文件大小只有 7 字节，但你的可能会有 1～2 字节的变动。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ls -l
total &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在列表中，文件模式串后的数字 1 代表存在于该文件上的硬链接数。现在应该是 1 ，因为我们还没有为这个测试文件建立任何硬链接。&lt;/p&gt;
&lt;h2 id=&#34;对硬链接进行实验&#34;&gt;对硬链接进行实验&lt;/h2&gt;
&lt;p&gt;​	硬链接创建一个指向同一 inode 的新目录项，当为文件添加一个硬链接时，你会看到链接数目的增加。确保当前工作目录仍为 ~/temp。创建一个指向 main.file.txt 的硬链接，然后查看该目录下文件列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln main.file.txt link1.file.txt
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ls -l
total &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link1.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	目录中两个文件都有两个链接且大小相同，时间戳也一样。这就是有一个 inode 和两个硬链接（即该文件的目录项）的一个文件。再建立一个该文件的硬链接，并列出目录清单内容。你可以建立硬链接： link1.file.txt 或 main.file.txt。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln link1.file.txt link2.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -l
total &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link1.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link2.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	注意，该目录下的每个硬链接必须使用不同的名称，因为同一目录下的两个文件不能拥有相同的文件名。试着创建一个和现存链接名称相同的硬链接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln main.file.txt link2.file.txt
ln: failed to create hard link &lt;span class=&#34;s1&#34;&gt;&amp;#39;link2.file.txt&amp;#39;&lt;/span&gt;: File exists
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	显然不行，因为 link2.file.txt 已经存在。目前为止我们只在同一目录下创建硬链接，接着在临时目录的父目录（你的主目录）中创建一个链接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln main.file.txt ../main.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -l ../main*
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	上面的 ls 命令显示 main.file.txt 文件确实存在于主目录中，且与该文件在 temp 目录中的名称一致。当然它们不是不同的文件，它们是同一文件的两个链接，指向了同一文件的目录项。为了帮助说明下一点，在 temp 目录中添加一个非链接文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ touch unlinked.file &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -l
total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link1.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link2.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
-rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 ls 命令的 i 选项查看 inode 的硬链接号和新创建文件的硬链接号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ls -li
total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link1.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 link2.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; 07:34 main.file.txt
&lt;span class=&#34;m&#34;&gt;657863&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	注意上面文件模式左边的数字 657024 ，这是三个硬链接文件所指的同一文件的 inode 号，你也可以使用 i  选项查看主目录中所创建的链接的节点号，和该值相同。而那个只有一个链接的 inode 号和其他的不同，在你的系统上看到的 inode  号或许不同于本文中的。&lt;/p&gt;
&lt;p&gt;接着改变其中一个硬链接文件的大小。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ df -h &amp;gt; link2.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -li
total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link1.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link2.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 main.file.txt
&lt;span class=&#34;m&#34;&gt;657863&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在所有的硬链接文件大小都比原来大了，因为多个目录项都链接着同一文件。&lt;/p&gt;
&lt;p&gt;​	下个实验在我的电脑上会出现这样的结果，是因为我的 /tmp  目录在一个独立的逻辑卷上。如果你有单独的逻辑卷或文件系统在不同的分区上（如果未使用逻辑卷），确定你是否能访问那个分区或逻辑卷，如果不能，你可以在电脑上挂载一个 U 盘，如果上述方式适合你，你可以进行这个实验。&lt;/p&gt;
&lt;p&gt;试着在 /tmp 目录中建立一个 ~/temp 目录下文件的链接（或你的文件系统所在的位置）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln link2.file.txt /tmp/link3.file.txt
ln: failed to create hard link &lt;span class=&#34;s1&#34;&gt;&amp;#39;/tmp/link3.file.txt&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;link2.file.txt&amp;#39;&lt;/span&gt;:
Invalid cross-device link
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	为什么会出现这个错误呢？ 原因是每一个单独的可挂载文件系统都有一套自己的 inode 号。简单的通过 inode 号来跨越整个 Linux 文件系统结构引用一个文件会使系统困惑，因为相同的节点号会存在于每个已挂载的文件系统中。&lt;/p&gt;
&lt;p&gt;有时你可能会想找到一个 inode 的所有硬链接。你可以使用 ls -li 命令。然后使用 find 命令找到所有硬链接的节点号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ find . -inum &lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt;
./main.file.txt
./link1.file.txt
./link2.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	注意 find 命令不能找到所属该节点的四个硬链接，因为我们在 ~/temp 目录中查找。 find 命令仅在当前工作目录及其子目录中查找文件。要找到所有的硬链接，我们可以使用下列命令，指定你的主目录作为起始查找条件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ find ~ -samefile main.file.txt
/home/dboth/temp/main.file.txt
/home/dboth/temp/link1.file.txt
/home/dboth/temp/link2.file.txt
/home/dboth/main.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果你是非超级用户，没有权限，可能会看到错误信息。这个命令也使用了 -samefile 选项而不是指定文件的节点号。这个效果和使用 inode 号一样且更容易，如果你知道其中一个硬链接名称的话。&lt;/p&gt;
&lt;h2 id=&#34;对软链接进行实验&#34;&gt;对软链接进行实验&lt;/h2&gt;
&lt;p&gt;​	如你刚才看到的，不能跨越文件系统边界创建硬链接，即在逻辑卷或文件系统中从一个文件系统到另一个文件系统。软链接给出了这个问题的解决方案。虽然它们可以达到相同的目的，但它们是非常不同的，知道这些差异是很重要的。&lt;/p&gt;
&lt;p&gt;让我们在 ~/temp 目录中创建一个符号链接来开始我们的探索。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln -s link2.file.txt link3.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -li
total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link1.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link2.file.txt
&lt;span class=&#34;m&#34;&gt;658270&lt;/span&gt; lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 15:21 link3.file.txt -&amp;gt;
link2.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 main.file.txt
&lt;span class=&#34;m&#34;&gt;657863&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	拥有节点号 657024 的那些硬链接没有变化，且硬链接的数目也没有变化。新创建的符号链接有不同的 inode 号 658270。 名为  link3.file.txt 的软链接指向了 link2.file.txt 文件。使用 cat 命令查看 link3.file.txt  文件的内容。符号链接的 inode 信息以字母 l （小写字母 l）开头，意味着这个文件实际是个符号链接。&lt;/p&gt;
&lt;p&gt;​	上例中软链接文件 link3.file.txt 的大小只有 14 字节。这是文本内容 link3.file.txt  的大小，即该目录项的实际内容。目录项 link3.file.txt 并不指向一个 inode  ；它指向了另一个目录项，这在跨越文件系统建立链接时很有帮助。现在试着创建一个软链接，之前在 /tmp 目录中尝试过的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ln -s /home/dboth/temp/link2.file.txt
/tmp/link3.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -l /tmp/link*
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 21:53 /tmp/link3.file.txt -&amp;gt;
/home/dboth/temp/link2.file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除链接&#34;&gt;删除链接&lt;/h2&gt;
&lt;p&gt;当你删除硬链接或硬链接所指的文件时，需要考虑一些问题。&lt;/p&gt;
&lt;p&gt;首先，让我们删除硬链接文件 main.file.txt。注意指向 inode 的每个目录项就是一个硬链接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ rm main.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -li
total &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link1.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link2.file.txt
&lt;span class=&#34;m&#34;&gt;658270&lt;/span&gt; lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 15:21 link3.file.txt -&amp;gt;
link2.file.txt
&lt;span class=&#34;m&#34;&gt;657863&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	main.file.txt 是该文件被创建时所创建的第一个硬链接。现在删除它，仍然保留着原始文件和硬盘上的数据以及所有剩余的硬链接。要删除原始文件，你必须删除它的所有硬链接。&lt;/p&gt;
&lt;p&gt;现在删除 link2.file.txt 硬链接文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dboth@david temp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ rm link2.file.txt &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ls -li
total &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 link1.file.txt
&lt;span class=&#34;m&#34;&gt;658270&lt;/span&gt; lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 15:21 link3.file.txt -&amp;gt;
link2.file.txt
&lt;span class=&#34;m&#34;&gt;657024&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 14:14 main.file.txt
&lt;span class=&#34;m&#34;&gt;657863&lt;/span&gt; -rw-rw-r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; dboth dboth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 08:18 unlinked.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	注意软链接的变化。删除软链接所指的硬链接会使该软链接失效。在我的系统中，断开的链接用颜色高亮显示，目标的硬链接会闪烁显示。如果需要修复这个损坏的软链接，你需要在同一目录下建立一个和旧链接相同名字的硬链接，只要不是所有硬链接都已删除就行。您还可以重新创建链接本身，链接保持相同的名称，但指向剩余的硬链接中的一个。当然如果软链接不再需要，可以使用 rm 命令删除它们。&lt;/p&gt;
&lt;p&gt;​	unlink 命令在删除文件和链接时也有用。它非常简单且没有选项，就像 rm 命令一样。然而，它更准确地反映了删除的基本过程，因为它删除了目录项与被删除文件的链接。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;我用过这两种类型的链接很长一段时间后，我开始了解它们的能力和特质。我为我所教的 Linux 课程编写了一个实验室项目，以充分理解链接是如何工作的，并且我希望增进你的理解。&lt;/p&gt;
&lt;p&gt;作者简介：&lt;/p&gt;
&lt;p&gt;​	戴维.布斯 - 戴维.布斯是 Linux 和开源倡导者，居住在北卡罗莱纳的罗列 。他在 IT 行业工作了四十年，为 IBM 工作了 20  多年的 OS/2。在 IBM 时，他在 1981 年编写了最初的 IBM PC 的第一个培训课程。他为 RedHat 教授过 RHCE 班，并曾在 MCI Worldcom、思科和北卡罗莱纳州工作。他已经用 Linux 和开源软件工作将近 20 年了。&lt;/p&gt;
&lt;p&gt;via: &lt;a href=&#34;https://opensource.com/article/17/6/linking-linux-filesystem&#34;&gt;https://opensource.com/article/17/6/linking-linux-filesystem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/users/dboth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;David Both&lt;/a&gt; 译者：&lt;a class=&#34;link&#34; href=&#34;https://github.com/yongshouzhang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yongshouzhang&lt;/a&gt; 校对：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文由 &lt;a class=&#34;link&#34; href=&#34;https://github.com/LCTT/TranslateProject&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCTT&lt;/a&gt; 原创编译，&lt;a class=&#34;link&#34; href=&#34;https://linux.cn/article-9105-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文来自：https://linux.cn/article-9105-1.html&lt;/p&gt;
&lt;p&gt;本文地址：https://www.linuxprobe.com/linux-users-guidance.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;注本文为转载且已提供原文地址&#34;&gt;&lt;strong&gt;注：本文为转载且已提供原文地址。&lt;/strong&gt;&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>简述Linux文件类型</title>
        <link>https://lunaasuka.github.io/p/%E7%AE%80%E8%BF%B0linux%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/%E7%AE%80%E8%BF%B0linux%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</guid>
        <description>&lt;h2 id=&#34;一普通文件-&#34;&gt;一：普通文件（-）&lt;/h2&gt;
&lt;p&gt;​	使用 ls -l 命令所显示出的第一列的第一个字符为 “-” 的即为普通文件，常见的 .mp3，.html，.txt等都是普通文件。&lt;/p&gt;
&lt;h2 id=&#34;二目录文件d&#34;&gt;二：目录文件（d）&lt;/h2&gt;
&lt;p&gt;​	同上，标识符为 “d” 的就是目录文件，在 linux 中目录也是文件，在 linux 中一切皆是文件。&lt;/p&gt;
&lt;h2 id=&#34;三链接文件l&#34;&gt;三：链接文件（l）&lt;/h2&gt;
&lt;p&gt;​	同上，标识符为 “l” 的就是链接文件，链接文件分为软链接与硬链接。&lt;/p&gt;
&lt;h3 id=&#34;1软链接&#34;&gt;（1）软链接&lt;/h3&gt;
&lt;p&gt;软链接，也叫符号链接，简单来说就是快捷方式，被删除并不会影响原文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ln -s &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;target_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;output_file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	使用该命令可以生成一个文件的软链接。需要注意的是，与windows的快捷方式不同的一点，软链接文件被修改后源文件也会产生变化。&lt;/p&gt;
&lt;h3 id=&#34;2硬链接&#34;&gt;（2）硬链接&lt;/h3&gt;
&lt;p&gt;​	硬链接就厉害多了，硬链接文件等于源文件的另一个人格，他俩是一个文件，删除其中一个另外一个并不会消失，但是其中一个被更改了另外一个也会被更改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ln &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;target_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;output_file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	同理使用该命令进行生成。&lt;/p&gt;
&lt;h2 id=&#34;块设备文件b&#34;&gt;块设备文件（b）&lt;/h2&gt;
&lt;p&gt;​	标识符为 “b” 。块设备文件支持以块（block）为单位的访问方式。在 EXT4 文件系统中，一个 block 通常为 4KB 的大小，也就是说每次可以存取 4096（或其整数倍） 个字节的数据。应用程序可以随机访问块设备文件的数据，程序可以自行确定数据的位置，硬盘、软盘等都是块设备。&lt;/p&gt;
&lt;h2 id=&#34;字符设备文件c&#34;&gt;字符设备文件（c）&lt;/h2&gt;
&lt;p&gt;​	标识符为 “c” 。字符设备文件以字节流的方式进行访问，由字符设备驱动程序来实现这种特性，这通常要用到 open、close、read、write 等系统调用。字符终端、串口和键盘等就是字符设备。另外，由于字符设备文件是以文件流的方式进行访问的，因此可以顺序读取，但通常不支持随机存取。&lt;/p&gt;
&lt;h2 id=&#34;管道文件p&#34;&gt;管道文件（p）&lt;/h2&gt;
&lt;p&gt;​	标识符为 “p” 。管道文件（ FIFO 文件）主要用于进程间通讯。比如使用 mkfifo 命令可以创建一个 FIFO 文件，启用一个进程A从FIFO文件里读数据，启动进程B往FIFO里写数据，先进先出，随写随读。在 FIFO 中可以很好地解决在无关进程间数据交换的要求，FIFO 的通信方式类似于在进程中使用文件来传输数据，只不过 FIFO 类型的文件同时具有管道的特性，在读取数据时，FIFO 管道中同时清除数据。&lt;/p&gt;
&lt;h2 id=&#34;套接字s&#34;&gt;套接字（s）&lt;/h2&gt;
&lt;p&gt;​	标识符为 “s” 。用于进程间的网络通讯。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用户行为监控</title>
        <link>https://lunaasuka.github.io/p/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E7%9B%91%E6%8E%A7/</link>
        <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E7%9B%91%E6%8E%A7/</guid>
        <description>&lt;p&gt;​	当有人使用你的电脑时，或者有人远程登录到你的机器时，你肯定想尽量详细的记录下别人做的一切。众所周知有个      history命令可以记录下在终端上敲下的命令，但是却无法复现出这些命令输出到终端的信息，这时就可以使用 script 命令，该命令是linux的系统命令，非常简单好用。&lt;/p&gt;
&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;
&lt;p&gt;​	我们可以直接在命令行中输入 script 命令来启动。先来看一下帮助文档。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Usage:
 script &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

Make a typescript of a terminal session.

Options:
 -a, --append                  append the output
 -c, --command &amp;lt;command&amp;gt;       run &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; rather than interactive shell
 -e, --return                  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; code of the child process
 -f, --flush                   run flush after each write
     --force                   use output file even when it is a link
 -o, --output-limit &amp;lt;size&amp;gt;     terminate &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; output files exceed size
 -q, --quiet                   be quiet
 -t&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, --timing&lt;span class=&#34;o&#34;&gt;[=&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; output timing data to stderr or to FILE
 -h, --help                    display this &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;
 -V, --version                 display version

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	script 命令可以指定文件名来记录打印结果，之后目标文件就可以记录下输出在终端上的文本信息。&lt;/p&gt;
&lt;p&gt;​	使用 Crtl + D 退出，或者输入 exit 。&lt;/p&gt;
&lt;p&gt;​	和该命令配套的还有一个 scriptreplay ，可以用来重放保存后的文件，但是该命令并不是系统默认命令而是需要安装， 如何安装呢？其实这个脚本是一个pl脚本，在 util-linux 这个包里可以找到它。在安装前一定要安装gcc，如果不安装在编译的时候肯定报错，安装后就可以使用了。（参考&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wulaoer/p/5168150.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文章&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&#34;自动化&#34;&gt;自动化&lt;/h2&gt;
&lt;p&gt;​	可以使用bash脚本让 script 命令在有人登陆后自动运行，我们可以把它添加进shell环境配置文件中。如果你正在使用bash shell，把这一行加进你的bash环境配置文件中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    $ vi ~/.profile
     
    &lt;span class=&#34;c1&#34;&gt;# run the script command to record everything&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# use -q for quite and -a option to append the script&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
    /usr/bin/script -qa /usr/local/script/log_record_script
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后保存。下次他登录进你的系统时，script命令就会自动运行，并把日志记录进 /usr/local/script/logrecordscript 。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>find命令特殊用法</title>
        <link>https://lunaasuka.github.io/p/find%E5%91%BD%E4%BB%A4%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</link>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/find%E5%91%BD%E4%BB%A4%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</guid>
        <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find -type f
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该命令可以列出当前目录下（包括子目录）所有文件。&lt;/p&gt;
&lt;h2 id=&#34;exec命令说明&#34;&gt;exec命令说明&lt;/h2&gt;
&lt;p&gt;-exec  参数后面跟的是command命令，它的终止是&lt;strong&gt;以;为结束标志的&lt;/strong&gt;，所以这句命令后面的分号是不可缺少的，&lt;strong&gt;考虑到各个系统中分号会有不同的意义，所以前面加反斜杠&lt;/strong&gt;。&lt;strong&gt;{}   花括号代表前面find查找出来的文件名&lt;/strong&gt;。这里只罗列出与find有关的用法与说明，详细说明请自行查询。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;1.查找目录及子目录下全部文件并对结果执行ls -lah&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find -type f -exec ls -lah &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;

输出
root@kali:~/Tools/post-poc# find -type f -exec ls -lah &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
-rwxrw-rw- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;826&lt;/span&gt; 12月 &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; ./post—poc.html
-rwxrw-rw- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;37&lt;/span&gt; 12月 &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; ./command.php
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.查找当前目录下一天内更改过的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt; find -type f -mtime -1 -exec ls -lah &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.查找当前目录下文件名以.log结尾且24小时内更改过的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt; find -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*.log&amp;#34;&lt;/span&gt; -type f  -mtime -1 -exec ls -lah &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>linux文件安全监测</title>
        <link>https://lunaasuka.github.io/p/linux%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9B%91%E6%B5%8B/</link>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://lunaasuka.github.io/p/linux%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9B%91%E6%B5%8B/</guid>
        <description>&lt;h3 id=&#34;知识点记录&#34;&gt;知识点记录&lt;/h3&gt;
&lt;p&gt;首先介绍一个工具，是一款开源的十分好用的资源监控工具——glances。&lt;img src=&#34;https://lunaasuka.github.io/p/linux%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9B%91%E6%B5%8B/1631531785923.png&#34;
	width=&#34;1440&#34;
	height=&#34;890&#34;
	srcset=&#34;https://lunaasuka.github.io/p/linux%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9B%91%E6%B5%8B/1631531785923_hu233d009daeaf463617adc7d876a0d9df_1075469_480x0_resize_box_2.png 480w, https://lunaasuka.github.io/p/linux%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9B%91%E6%B5%8B/1631531785923_hu233d009daeaf463617adc7d876a0d9df_1075469_1024x0_resize_box_2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1631531785923&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;388px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;glances是一个基于python语言开发，可以为linux或者UNIX性能提供监视和分析性能数据的功能。glances在用户的终端上显示重要的系统信息，并动态的进行更新，让管理员实时掌握系统资源的使用情况，而动态监控并不会消耗大量的系统资源，比如CPU资源，通常消耗小于2%，glances默认每两秒更新一次数据。同时glances还可以将相同的数据捕获到一个文件，便于以后对报告进行分析和图形绘制，支持的文件格式有.csv电子表格格式和和html格式。&lt;/p&gt;
&lt;p&gt;glances可以分析系统的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU使用率&lt;/li&gt;
&lt;li&gt;内存使用率&lt;/li&gt;
&lt;li&gt;内核统计信息和运行队列信息&lt;/li&gt;
&lt;li&gt;磁盘I/O速度、传输和读/写比率&lt;/li&gt;
&lt;li&gt;磁盘适配器&lt;/li&gt;
&lt;li&gt;网络I/O速度、传输和读/写比率&lt;/li&gt;
&lt;li&gt;页面监控&lt;/li&gt;
&lt;li&gt;进程监控-消耗资源最多的进程&lt;/li&gt;
&lt;li&gt;计算机信息和系统资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装也比较简单，他们的&lt;a class=&#34;link&#34; href=&#34;https://github.com/nicolargo/glances&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github界面&lt;/a&gt;提供了多种安装方式，我这边就简单的pip3 install glances安装了。&lt;/p&gt;
&lt;p&gt;关于该工具的使用方法国内也有不少人写过文章，详细内容请自己去搜寻。&lt;/p&gt;
&lt;h2 id=&#34;监控linux下文件变化&#34;&gt;监控linux下文件变化&lt;/h2&gt;
&lt;p&gt;**1）**使用find -ctime (参数) 命令&lt;/p&gt;
&lt;p&gt;该命令可以查看参数时间内发生过变动的文件。&lt;/p&gt;
&lt;p&gt;例如find -ctime -5可以找出5天内变化过的文件，之后可以结合exec命令进行其他操作。有关find的一些用法请看我的另一篇文章&lt;a class=&#34;link&#34; href=&#34;https://lunaasuka.github.io/2021/09/13/find%e5%91%bd%e4%bb%a4%e7%89%b9%e6%ae%8a%e7%94%a8%e6%b3%95/&#34; &gt;“find命令特殊用法”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：这里既可以使用ctime也可以使用mtime，两者稍有差异，但是网上对此的解析比较少（但是各类教程使用mtime的倒是很多&amp;hellip;），所以大家斟酌着使用，习惯用哪个就用哪个。&lt;/p&gt;
&lt;p&gt;**2）**使用Iynis工具&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cisofy.com/lynis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;是lynis的官方网站。&lt;/p&gt;
&lt;p&gt;Lynis 是一款运行在 Unix/Linux 平台上的基于主机的、开源的安全审计软件。Lynis是针对Unix/Linux的安全检查工具，可以发现潜在的安全威胁。这个工具覆盖可疑文件监测、漏洞、恶意程序扫描、配置错误等。 笔者暂时还没有研究该工具，以后可能会单独写一篇文章来介绍该工具。&lt;/p&gt;
&lt;p&gt;**3）**通过脚本来进行文件md5监控&lt;/p&gt;
&lt;p&gt;我们可以简单的计算一个文件的md5值然后记录下来，之后如果进行比对的时候这个值发生变化了则该文件已经被更改过了。网上开源的脚本不少，我在这里就不做介绍了，有需求的同学请自寻。&lt;/p&gt;
&lt;p&gt;2021-9-29日注：发现了一个工具可以用来监测文件特征值，比使用脚本方便的多，叫 aide ,我这边没有安装也尚未进行测试，但是网上有关的教程和实验很多，大家可以去查查看。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
